{
  "@context": "https://linked.art/ns/v1/linked-art.json",
  "id": "https://example.org/cdkg/LinguisticObject/presentation/21",
  "type": "LinguisticObject",
  "_label": "Textual content of \"Reasoning for the Answer: Who is the Greatest Formula 1 Driver of all Time?\"",
  "classified_as": [
    {
      "id": "http://vocab.getty.edu/aat/300027388",
      "type": "Type",
      "_label": "Transcript"
    }
  ],
  "content": "Hello. My name is Pete Crocker, and I'm CEO and cofounder of Oxford Semantic Technologies. In this session I'm going to begin by showing you a short demonstration that answers the question we posed for this session, who is the greatest formula one driver of all time? This is a question that is frequently debated, and a quick search will reveal many contradicting answers. This application is powered by AudioFox, our high performance knowledge graph and semantic reasoning engine. This demonstration will be followed by a quick run through of a series of use cases making use of AudioFox today. And finally, we lift the hood on the demonstration and give you some more detail behind the engine. If at any point you have any questions, please ask them in the chat and we'll be happy to answer as many as we can. Otherwise, come and find us at our booth during the conference where we will happily go into far more detail. So without further ado, let's dive straight in. Our dashboard includes a series of controls where you define the question, here on the left hand side. And over on the right, a set of information boxes that show you some of the statistics behind the question being asked and the data that's returned. In the middle, we have the answer to our question. First, how long the question took and then a chart showing us the score against the time that the driver was racing. So what we're showing here is the race points for the top twenty drivers and the year of the last race in which they participated, all the way up until just a few weeks ago when the last race was taken here in twenty twenty one. Scrolling down we also get a tabular view of the results and we can see here the top ten and a lot more detail and and statistics all organized and ordered by the score based on our criteria. To vary the definition of our question, we can change the scoring system from points to position gained in a race. So what's happening here? For every single race ever recorded for formula one, we are looking at the starting position of a driver. We're taking where they ended up, and we're taking the difference to calculate the positions gained during the course of that race. We're totaling up all of those differences across the entire dataset, and then we're ordering to find a person, in this case, Fernando Alonso, who's gained the most positions over the entire history of Formula One. Now that'd be great, but perhaps Fernando Alonso was running in a in a fabulous piece of equipment, a fabulous car. So what we can then go and look at is a comparison of Fernando Alonso only with his teammates. How did he do against the others running in McLaren or Ferrari, for example, when he was driving for them? So by clicking on teammates, that's exactly what happens. And here, Jonathan Palmer jumps to the top of the list. So why why is he at the top? Well, his positions gained over the course of history when compared with his teammates gives him a score of hundred and eighty six. Okay. But let's have a look. He's raced seventy six races. What if, someone else has had a shorter career but, again, has, has recorded more positions gained against teammate? Well, again, we can change our calculation, change the definition of our question, and this time flip over to calculating an average. Now we start to see our our first sort of problem. We've narrowed the system such that we're gonna be favoring those that have had few races, in this case we're seeing pretty much the entire field occupied by those with a single race, and they may have won that race or come very high in their positions gained. But, really, are they the best? They've only raced in one race. So let's change the filters of our criteria. We're gonna up the minimum races to five. And while we're here, why don't we put in some a requirement for podium positions. And there we see our driving results drop from twenty five thousand to now a field with fourteen thousand results. Our drivers have come down from eight hundred and fifty three to a hundred and eighteen that are qualifying with that minimum of five and three. Okay. So what have we shown so far? Well, we've been able to make our decision for the question based on race points or position gained, whole field teammates total and average. Let's come to the final thing that we're gonna consider for this demonstration. When discussing this particular application with a former CEO of one of the teams, he suggested that weather really tests a driver's skills and ability on the track. So we can filter based on the conditions on the day that the race took place. At the moment, we're showing results for all conditions, but we can change that. We can go for mixed where there was some evidence of rain either on the track before the race or we had some rain during the race. Or, alternatively, we can go for full wet race conditions. And here you see there haven't been very many races with wet fifty four that are recorded in in our data, but here, this arguably is a really good test of what makes the best formula one driver. Now maybe we think that fifty four is just too low a number to consider in terms of number of races. So we'll flip back to a mixed conditions and settle there. And what we see here is Ayrton Senna, one of the greatest drivers of all time comes to the top shortly followed by James Hunt. And in third place, not too far behind, Max Verstappen. If you'd like to try this application for yourself, please head to f one dot rdfox dot tech, and I'd be interested to hear how you define the question yourself. Please note I've been running this application locally as I wanted to show you the true performance of IDEA Fox. Given our speed, your query times are most certainly going to be dominated not by the time it takes IDEA Fox, but by the network latency between you and the servers where we're hosting that service. Okay. So what about, what about the company that that produces Alia Fox? We were founded back in twenty seventeen. We're headquartered in Oxford in UK, and we're a spin out of the University of Oxford. We're an independent software vendor, and we're proud to be backed by Samsung Ventures who saw promise in the technology back in the early days. AudioFox itself is what we think of as a a knowledge graph, and plenty have been spoken about knowledge graphs during this conference. But we also consider ourselves a very powerful reasoning engine, and more on that to come. We're open standards based, built, as you've, as you might have already guessed from our heritage, on leading research, and we pride ourselves on on speed and performance along with the reasoning. We have fast query times, fast load times, fast materialization times when it comes to reasoning. And all of this is built on top of the engineering and hard hard work that's gone into AudioFox. We're based in memory. We're built on c plus plus We'll start in finance. Here, rules are used to chase down chains of money flows within transactions for a bank. This is in support of anti anti money laundering or AML applications. Chasing these kind of chains are not patterns that you can simply detect with regular graph type queries. They require vast amounts of numerical and date time reasoning, and most importantly, recursion as we go through those changes. Next up, we have some work done by Samsung Research where they have built recommendation systems that run directly on the device itself. Here, they're providing answers to personalized recommendations that take data from the device out on the edge and perform the reasoning without that data ever leaving a user's trusted device. Samsung Research, in collaboration with Oxford University, have recently published a paper demonstrating how this can be achieved using RDFox on those devices. Festo, the automation company, were among the first to see the power of reasoning for building their electronic drivetrain configuration engine. This solution computes all the possible ways in which their components can be assembled to so solve their clients' needs. Built on RDFox, this replaced an old legacy relational database system that took over sixteen hours to compute the capabilities those compatibilities, sorry, with something that now takes ninety seconds. And so this is all supported with incremental reasoning. This approach completely transforms how they think about the problem, and as it turns out, has been demonstrated to be more accurate than the old system. OST also partners with Sirius Research Center in enabling the digitization of large scale engineering tasks. Here, we're supporting the design process. Doing things like checking engineering constraints at massive scale, building industrial digital twins to support their applications. In a medical setting, RDFox is being built into power decision support. Here, clinical knowledge captured in captured in ontologies assists clinicians and makes suggestions as they perform investigations. In this clinical setting, embedding ARDFox within the device allows these devices to operate in real time and potentially disconnected from the network, providing both resilience and protecting patient confidentiality. Finally, Ulm University, in a project sponsored by BMW, have used AudioFox to integrate data in the field of autonomous driving. The need to do so on device is clear as is the need for a highly performant decision engine, of course, AudioFox. So what makes all of this possible? We believe semantic technology is best suited to these applications. It provides a highly flexible and adaptable data model. When, for example, we conceptually want to map out ideas, we naturally turn to drawing graphs. Ontologies then support a layering of concepts and extend instance data with domain knowledge. Integration, in particular, declarative integration, bring all of this together, the sources needed to answer our questions. And finally, reasoning is what makes sense of it all. It's required to bring together the logic perhaps captured within our ontology, the domain logic logic with data and provide intelligence to our query answering. AudioFox is our answer to these semantic needs. AudioFox provides you the power to unlock applications previously undreamt of, flexibility for how you wish to shape your data or the ontologies you wish to bring to a problem, Performance, unrivaled in the market at the time of data importation, reasoning, the analytics, and query answering. And finally, scalability and versatility. The ability to scale from the smallest device up to billions of facts. I'd next like to focus our attention on reasoning. Here I list many aspects of reasoning that are used in the applications I covered earlier. As you can see from the table, others in this space often define reasoning as ontological reasoning, and some provide even constraints through the likes of Shackle. These are all important. However, AudioFox goes beyond this with graph analytics, data, and numerical analysis, the kind of thing you can't imagine some of those financial applications being possible without. As well as dealing with constraints, both locally, we can also think of constraints in a global setting, considering the constraints across the system as a whole. Finally, we provide the ability to combine all of these. You can bring aggregation together with recursion, negation with class based inferencing. If you get a chance later on during the day to join the session with Marcus from Siemens, he has some really nice examples where he's using reasoning to perform many of the many of the above. Next, let's lift the hood on my earlier demonstration. Every time one of those controls down the left hand side is changed, queries are being issued to RDFox. And as you saw, live results are being computed in milliseconds. Behind these queries, we have, as we saw on the info boxes, over a thousand races, over eight hundred drivers, and fundamental to our question, over twenty five thousand results consulted and calculated against for the score to your question. There is no additional cash. We are achieving these results through the hard engineering and in memory approach that has gone into and is at the heart of AudioFox. Reasoning also plays its part in precomputing some of the relationships in advance. Note, given the variations possible in our questions, we cannot compute the scores in advance, just some of those relationships. This graphic shows us how we assembled the data. Let's start with the sources. On the left hand side, we have a database containing all of the race data stretching back to the very beginning of the sport. We then supplement this with images and weather reports drawn from Wikipedia. Once that's done, a small NLP task categorizes the weather text into RDF concepts. That's where we get our dry conditions, mixed conditions, and and wet conditions from. There are a number of rules in the system. Here I'm showing just one of those, one of the more interesting ones where we establish a connection between teammates through through common race and constructor relationships. Essentially, what's happening here is a rule is running as soon as the data is brought into the system. A rule is running that tech compares every single result with other results in the system and where it locates common races, that's circuits, and common constructors, a new relationship is materialized into the graph, the teammates result. And this is used for those queries where we were running, where we comparing where we change the fields to all field to the teammates. Through that application, we've seen some of the ways in which RDF Fox can be integrated into your system. What I'm showing here is a much bigger picture with all the possible integration points for for the technology . Over on the left hand side, we have the external integrations, and we were doing some of this when we loaded RDF through files and through through SPARQL for our for a demonstration. In addition to RDF, we can be loading relational data through through SQL. We can be loading file based sources and, text based sources through Solr to provide a a text index as well. On the right hand side, we have various development and operations aspects to Ardeafox. We provide a console where you can run queries and visualize results to those queries and explore your data. We provide command lines for controlling the running of AudioFox. And of course of course, we provide developers and knowledge engineers with the tools they need to modify the core assets of any solution, Datalog, OWL, Shackle, and Swell. In the middle, we see the components that make up the runtime of ArduaFox, the sparkle API we've already, described. The reasoning engine, the piece that's performing, the rules, act actioning the rules, for our applications and materializing those results in memory into the graph. We also provide a a persistence layer. So we're not only running in memory, but the results, the data that's loaded and the results of of materialization are persisted to disk should you need to restart the system. And as we've seen through applications, all of this can run out on the edge on the smallest of devices, on premise, or in the cloud. For our cloud support, we provide Docker images, and we have customers running on AWS, Google Cloud Platform, and Azure. To conclude, we've seen that Ardfox takes you from question to answer in milliseconds. Through reasoning, we unlock a new breed of applications not possible before. We're available on the smallest of devices to the largest to cope with concerns around privacy and tackle some of the largest scale problems. I'll leave you to decide who the best driver is, and we've provided the tools for you. If you can define the question, the answer is only gonna be milliseconds away. Finally, let me leave you with a quote from one of our customers, and I'll paraphrase. Adia Fox makes it possible for us to do the impossible. So do you have something you consider impossible? If so, we'd love to hear from you. During this conference, please visit us as our booth. Alternatively, if you're not able to join us there, here are some links for you to follow-up after the event. Thank you. And remember, f one dot r d f fox dot tech if you'd like to try and answer that question for yourself.",
  "language": [
    {
      "id": "http://vocab.getty.edu/aat/300388277",
      "type": "Language",
      "_label": "English"
    }
  ],
  "created_by": {
    "id": "https://example.org/cdkg/Creation/presentation/21",
    "type": "Creation",
    "caused_by": [
      {
        "id": "https://example.org/cdkg/Activity/presentation/21",
        "type": "Activity",
        "_label": "Presentation of \"Reasoning for the Answer: Who is the Greatest Formula 1 Driver of all Time?\""
      }
    ]
  },
  "digitally_carried_by": [
    {
      "id": "https://example.org/cdkg/DigitalObject/recording/21",
      "type": "DigitalObject",
      "_label": "Recording of \"Reasoning for the Answer: Who is the Greatest Formula 1 Driver of all Time?\""
    }
  ]
}